<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class User {

	/**
	 * ID de l'utilisateur
	 * @var int
	 * @access protected
	 */
	protected  $idUser;

	/**
	 * Pseudo de l'utilisateur
	 * @var String
	 * @access protected
	 */
	protected  $nicknameUser;

	/**
	 * E-mail de l'utilisateur
	 * @var String
	 * @access protected
	 */
	protected  $emailUser;

	/**
	 * Autorisation écriture d'un article
	 * @var Bool
	 * @access protected
	 */
	protected  $redacArticle;

	/**
	 * Autorisation modification de ses articles
	 * @var Bool
	 * @access protected
	 */
	protected  $editOwnArticle;

	/**
	 * Autorisation suppression de ses articles
	 * @var Bool
	 * @access protected
	 */
	protected  $deleteOwnArticle;

	/**
	 * Autorisation d'édition des commentaires des autres utilisateurs
	 * @var Bool
	 * @access protected
	 */
	protected  $editComment;

	/**
	 * Autorisation de suppression des commentaires des autres utilisateurs
	 * @var Bool
	 * @access protected
	 */
	protected  $deleteComment;


	/**
	 * Fonction __construct privée car PDO s'occupe de l'instanciation
	 * @access private
	 * @return void
	 */

	private  function __construct() {

	}


	/**
	 * Accesseur
	 * @access public
	 * @param String $name Nom de l'attribut
	 * @return Multiple
	 */

	public  function __get($name) {

	}


	/**
	 * Vérifie l'existence de l'utilisateur et retourne une instance de User s'il existe
	 * @access public
	 * @param array $data Contient les informations pour se connecter
	 * @return User
	 */

	public static  function createFromAuth($data) {

	}


	/**
	 * Démarre une session si ce n'est pas encore fait
	 * @access public
	 * @return void
	 */

	public static  function startSession() {

	}


	/**
	 * Linéarise l'utilisateur en l'enregistrant dans une variable de session
	 * @access public
	 * @return void
	 */

	public  function saveIntoSession() {

	}


	/**
	 * Délinéarisation de l'utilisateur
	 * @access public
	 * @return User
	 */

	public static  function createFromSession() {

	}


	/**
	 * Vérifie si l'utilisateur est connecté
	 * @access public
	 * @return Bool
	 */

	public static  function isConnected() {

	}


	/**
	 * Déconnecte l'utilisateur
	 * @access public
	 * @return void
	 */

	public static  function logoutIfRequested() {

	}


	/**
	 * Inscrit un utilisateur
	 * @access public
	 * @param array $data Contient les informations pour l'inscription
	 * @return void
	 */

	public static  function addUser($data) {

	}


	/**
	 * Editer son profil
	 * @access public
	 * @param array $data Contient les nouvelles informations du profil
	 * @return void
	 */

	public  function editProfile($data) {

	}


	/**
	 * Rédiger un article
	 * @access public
	 * @param array $data Contient lesinformations de l'article
	 * @return void
	 */

	public  function redacArticle($data) {

	}


	/**
	 * Editer son article
	 * @access public
	 * @param array $data Contient les nouvelles informations de l'article
	 * @return void
	 */

	public  function editOwnArticle($data) {

	}


	/**
	 * Supprimer son article
	 * @access public
	 * @param int $idArticle ID de l'article à supprimer
	 * @return void
	 */

	public  function deleteOwnArticle($idArticle) {

	}


	/**
	 * Rédiger un commentaire
	 * @access public
	 * @param array $data Contient les informationsdu commentaire
	 * @return void
	 */

	public  function redacComment($data) {

	}


	/**
	 * Editer le commentaire d'un autre utilisateur	
	 * @access public
	 * @param array $data Contient les nouvelles informations du commentaire
	 * @return void
	 */

	public  function editComment($data) {

	}


	/**
	 * Supprimer le commentaire d'un autre utilisateur
	 * @access public
	 * @param int $idComment ID du commentaire à supprimer
	 * @return void
	 */

	public  function deleteComment($idComment) {

	}


	/**
	 * Ecrire un message privé
	 * @access public
	 * @param array $data Contient les informations du message privé envoyé
	 */

	public  function sendPrivateMessage($data) {

	}


	/**
	 * Lire un message privé
	 * @access public
	 * @param int $idPrivateMessage ID du message privé à lire
	 * @return PrivateMessage
	 */

	public  function readPrivateMessage($idPrivateMessage) {

	}


	/**
	 * Afficher le profil d'un utilisateur
	 * @access public
	 * @param int $idUser ID de l'utilisateur
	 * @return User
	 */

	public  function showProfile($idUser) {

	}


	/**
	 * @access public
	 * @param PrivateMessage $pm 
	 * @param String $receiver 
	 * @return Bool
	 */

	public  function sendPM(PrivateMessage $pm, $receiver) {

	}


	/**
	 * @access public
	 * @param int $idPM 
	 * @return PrivateMessage
	 */

	public final  function getPM($idPM) {

	}


}
?>