<?php
/**
 *
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

final class MyPDO {

	/**
	 * Instance de PDO
	 * @var PDO
	 * @access private
	 */
	private static  $_PDOInstance = null;

	/**
	 * Data Source Name: mysql:dbname=nomDeLaBase;host=adresseDeLHote
	 * @var String
	 * @access private
	 */
	private static  $_DSN = null;

	/**
	 * Nom d'utilisateur pour se connecter à la base
	 * @var String
	 * @access private
	 */
	private static  $_username = null;

	/**
	 * Mot de passe pour se connecter à la base
	 * @var String
	 * @access private
	 */
	private static  $_password = null;

	/**
	 * Options de drivers
	 * @var array
	 * @access private
	 */
	private static  $_driverOptions = array(
PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
 PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
	);


	/**
	 * Fonction __construct privée pour ne pas avoir d'instance de PDO
	 * @access private
	 * @return void
	 */

	private  function __construct() {

	}



	/**
	 * Vérifie que l'objet PDO est configuré
	 * @access private
	 * @return bool
	 */

	private static  function hasConfiguration() {
		return self::$_DSN !== null;
	}


	/**
	 * Fonction __clone pour empêcher de cloner
	 * @access public
	 * @return void
	 */

	public  function __clone() {
		throw new Exception("Clonage interdit");
	}


	/**
	 * Retourne le singleton PDO s'il existe
	 * @access public
	 * @return PDO
	 */

	public static function getInstance() {
		if (is_null(self::$_PDOInstance)) {
			if (self::hasConfiguration()) {
				self::$_PDOInstance = new PDO(self::$_DSN, self::$_username, self::$_password, self::$_driverOptions) ;
			}
			else {
				return false;
			}
		}
		return self::$_PDOInstance;
	}



	/**
	 * Configure le singleton PDO avec les paramètres fournis
	 * @access public
	 * @param String $dsn Data Source Name: mysql:dbname=nomDeLaBase;host=adresseDeLHote
	 * @param String $username Nom d'utilisateur pour se connecter à la base
	 * @param String $password Mot de passe pour se connecter à la base
	 * @param Array $driverOptions Options de drivers
	 * @return void
	 */

	public static  function setConfiguration($dsn, $username = '', $password = '', $driverOptions = array()) {
		self::$_DSN = $dsn;
		self::$_username = $username;
		self::$_password = $password;
		self::$_driverOptions = $driverOptions + self::$_driverOptions;
	}


}
?>
